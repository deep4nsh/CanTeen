import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:canteen_proj/core/services/firestore_service.dart'; // generated by flutterfire configure
import 'package:canteen_proj/features/auth/screens/login_screen.dart';
import 'package:canteen_proj/student/screens/dashboard_screen.dart';
import 'package:canteen_proj/owner/screens/owner_dashboard.dart';
import 'package:canteen_proj/admin/screens/admin_dashboard.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(const CanTeenApp());
}

class CanTeenApp extends StatelessWidget {
  const CanTeenApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CanTeen',
      theme: ThemeData(primarySwatch: Colors.orange),
      home: const AuthGate(),
      debugShowCheckedModeBanner: false,
    );
  }
}

/// AuthGate listens to auth state. If user logged in -> fetch role doc and show dashboard.
class AuthGate extends StatelessWidget {
  const AuthGate({super.key});

  Future<String?> _fetchUserRole(String uid) async {
    final doc = await FirebaseFirestore.instance.collection('users').doc(uid).get();
    if (!doc.exists) return null;
    return doc.data()?['role'] as String?;
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        final user = snapshot.data;
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(body: Center(child: CircularProgressIndicator()));
        }
        if (user == null) {
          // Not logged in
          return const LoginScreen();
        }

        // Logged in -> fetch role and return appropriate dashboard via FutureBuilder
        return FutureBuilder<String?>(
          future: _fetchUserRole(user.uid),
          builder: (context, roleSnapshot) {
            if (roleSnapshot.connectionState == ConnectionState.waiting) {
              return const Scaffold(body: Center(child: CircularProgressIndicator()));
            }
            final role = roleSnapshot.data ?? 'student';
            if (role == 'student') return const StudentDashboard();
            if (role == 'owner') return const OwnerDashboard();
            if (role == 'admin') return const AdminDashboard();
            // fallback
            return const StudentDashboard();
          },
        );
      },
    );
  }
}
